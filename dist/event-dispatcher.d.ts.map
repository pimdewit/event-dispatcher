{"mappings":"AAAA;IACE,IAAI,CAAC,EAAE,OAAO,CAAC;CAChB;AAED;IACE,QAAQ,EAAE,CAAC,KAAK,CAAC,EAAE,oBAAoB,KAAK,IAAI,CAAC;CAClD;AAED,4CAA4C;AAC5C,6BAAsB,CAAC,SAAS,MAAM;IACpC,QAAQ,CAAC,MAAM,qDAA+C;IAM9D,gBAAgB,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,eAAe,CAAC,UAAU,CAAC;IAS/D,mBAAmB,CAAC,IAAI,EAAE,CAAC,EAAE,QAAQ,EAAE,eAAe,CAAC,UAAU,CAAC;IAQlE,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,oBAAoB;CAMnD","sources":["src/src/main.ts","src/main.ts"],"sourcesContent":[null,"export interface EventDispatcherEvent {\n  data?: unknown;\n}\n\ninterface RegisteredEvent {\n  listener: (event?: EventDispatcherEvent) => void;\n}\n\n/** JavaScript events for custom objects. */\nclass EventDispatcher<T extends number> {\n  readonly events = new Map<T, RegisteredEvent['listener'][]>();\n\n  private eventTypeExists(type: T) {\n    return this.events.has(type);\n  }\n\n  addEventListener(type: T, listener: RegisteredEvent['listener']) {\n    if (!this.eventTypeExists(type)) this.events.set(type, []);\n\n    const eventMap = this.events.get(type)!;\n    if (eventMap.includes(listener)) return;\n\n    eventMap.push(listener);\n  }\n\n  removeEventListener(type: T, listener: RegisteredEvent['listener']) {\n    if (!this.eventTypeExists(type)) return;\n\n    const eventMap = this.events.get(type)!;\n    const index = eventMap.indexOf(listener);\n    if (index > -1) eventMap.splice(index, 1);\n  }\n\n  dispatchEvent(type: T, data?: EventDispatcherEvent) {\n    if (!this.eventTypeExists(type)) return;\n\n    const listeners = this.events.get(type)!;\n    for (let i = 0; i < listeners.length; i++) listeners[i](data);\n  }\n}\n\nexport {EventDispatcher};\n"],"names":[],"version":3,"file":"event-dispatcher.d.ts.map"}