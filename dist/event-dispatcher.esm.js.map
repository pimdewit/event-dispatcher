{"mappings":"AAQA,EAA4C,AAA5C,wCAA4C,AAA5C,EAA4C,OACtC,yCAAe;IAGX,eAAe,CAAC,IAAO,EAAE,CAAC;QAChC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI;IAC7B,CAAC;IAED,gBAAgB,CAAC,IAAO,EAAE,QAAqC,EAAE,CAAC;QAChE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC;QAEzD,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI;QACrC,EAAE,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,GAAG,MAAM;QAEvC,QAAQ,CAAC,IAAI,CAAC,QAAQ;IACxB,CAAC;IAED,mBAAmB,CAAC,IAAO,EAAE,QAAqC,EAAE,CAAC;QACnE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,MAAM;QAEvC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI;QACrC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,QAAQ;QACvC,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;IAC1C,CAAC;IAED,aAAa,CAAC,IAAO,EAAE,IAA2B,EAAE,CAAC;QACnD,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,MAAM;QAEvC,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI;QACtC,GAAG,CAAE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAI,SAAS,CAAC,CAAC,EAAE,IAAI;IAC9D,CAAC;;QA7BH,IA8BC,CA7BU,MAAM,GAAG,GAAG,CAAC,GAAG","sources":["src/main.ts"],"sourcesContent":["export interface EventDispatcherEvent {\n  data?: unknown;\n}\n\ninterface RegisteredEvent {\n  listener: (event?: EventDispatcherEvent) => void;\n}\n\n/** JavaScript events for custom objects. */\nclass EventDispatcher<T extends number> {\n  readonly events = new Map<T, RegisteredEvent['listener'][]>();\n\n  private eventTypeExists(type: T) {\n    return this.events.has(type);\n  }\n\n  addEventListener(type: T, listener: RegisteredEvent['listener']) {\n    if (!this.eventTypeExists(type)) this.events.set(type, []);\n\n    const eventMap = this.events.get(type)!;\n    if (eventMap.includes(listener)) return;\n\n    eventMap.push(listener);\n  }\n\n  removeEventListener(type: T, listener: RegisteredEvent['listener']) {\n    if (!this.eventTypeExists(type)) return;\n\n    const eventMap = this.events.get(type)!;\n    const index = eventMap.indexOf(listener);\n    if (index > -1) eventMap.splice(index, 1);\n  }\n\n  dispatchEvent(type: T, data?: EventDispatcherEvent) {\n    if (!this.eventTypeExists(type)) return;\n\n    const listeners = this.events.get(type)!;\n    for (let i = 0; i < listeners.length; i++) listeners[i](data);\n  }\n}\n\nexport {EventDispatcher};\n"],"names":[],"version":3,"file":"event-dispatcher.esm.js.map"}